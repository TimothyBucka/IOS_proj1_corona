#!/usr/bin/env bash
set -u  # FIXME after

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

# id,                     1     FIXME
# datum,                  2
# vek,                    3
# pohlavi,                4
# kraj_nuts_kod,          5
# okres_lau_kod,          6
# nakaza_v_zahranici,     7
# nakaza_zeme_csu_kod,    8
# reportovano_khs         9

############################## FUNCTIONS ##############################
check_age() {
    if [[ "$1" =~ ^[0-9]{1,3}$ ]] || [ "$1" == '' ]; then
        return 0
    else
        EXIT_CODE="1"
        return 1
    fi
}

check_date() {
    if [[ "$1" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] && [ -n "$(date -d "$1" 2>/dev/null)" ] || [ "$1" == '' ]; then
        return 0
    else
        EXIT_CODE="1"
        return 1
    fi
}

debug_print_values() {
    # FIXME delete this
    echo "-a $A_FILTER and $A_DATETIME"
    echo "-b $B_FILTER and $B_DATETIME"
    echo "-g $G_FILTER and $GENDER"
    echo "-s $S_FILTER and $WIDTH"
    echo "Command: $COMMAND"
}

help() {
    echo "This script filters records of people infected by COVID-19."
    echo ""
    echo "Usage: corona [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]]"
    echo ""
    echo "   -h              prints help with instructions, and script terminates"
    echo ""
    echo "COMMAND:"
    echo "   infected          prints number of infected"
    echo "   merge             merges multiple input files into one, keeping the original order"
    echo "   gender            prints number of infected for each gender"
    echo "   age               prints number of infected for each age group"
    echo "   daily             prints number of infected for each day"
    echo "   monthly           prints number of infected for each month"
    echo "   yearly            prints number of infected for each year"
    echo "   countries         prints number of infected for each country (CZ not included)"
    echo "   districts         prints number of infected for each district"
    echo "   regions           prints number of infected for each region"
    echo ""
    echo "FILTERS:"
    echo "   -a DATETIME       after: records after given date (included)"
    echo "   -b DATETIME       before: records before given date (included)"
    echo "   -g GENDER         records with given GENDER: M - male (muzi), Z - female (zeny)"
    echo "   -s [WIDTH]        with commands gender, age, daily, monthly, yearly, countries"
    echo "                     districts and regions the data are displayed in a histogram."
    echo "                     WIDTH (optional positive number) sets width of the histogram."
    echo "                     If not given, with is set to default (see documentation)"
    echo "   -d DISTRICT_FILE  for command disrticts prints, instead of the LAU 1 code of"
    echo "                     a district, its proper name. DISTRICT_FILE contains the"
    echo "                     code to name mapping"
    echo "   -r REGIONS_FILE   for command regions prints instead of the NUTS 3 code of"
    echo "                     a region, its proper name. REGIONS_FILE contains the"
    echo "                     code to name mapping"
    echo ""
    echo "If no commands or filters are given, script prints records to standart output"
    echo "Script is able to process .gz or .bz2 files"
    echo "If no files (LOG, LOG2, ...) are given, sript expects records from standart input"
    echo ""
}

############################## DATA ##############################
# COMMANDS="infected merge gender age daily monthly yearly countries districts regions"
COMMAND=""

# FILTERS
A_FILTER=""
B_FILTER=""
G_FILTER=""
S_FILTER=""
D_FILTER=""
R_FILTER=""

# filters parameters
A_DATETIME=""
B_DATETIME="2023-01-01"
GENDER=""
WIDTH=""
DISTRICT_FILE=""
REGIONS_FILE=""

EXIT_CODE="0"
HEADER="id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs"
LOGS=""

############################## MAIN ##############################
while [ "$#" -gt 0 ]; do
    case "$1" in
    infected | merge | gender | age | daily | monthly | yearly | countries | districts | regions)
        COMMAND=$1
        ;;
    -a)
        A_FILTER=1
        A_DATETIME=$2
        shift
        ;;
    -b)
        B_FILTER=1
        B_DATETIME=$2
        shift
        ;;
    -g)
        G_FILTER=1
        GENDER=$2
        shift
        ;;
    -s)
        S_FILTER=1
        if [[ "$2" =~ ^[0-9]+$ ]]; then
            WIDTH=$2
            shift
        fi
        ;;
    -d)
        D_FILTER=1
        DISTRICT_FILE=$2
        shift
        ;;
    -r)
        R_FILTER=1
        REGIONS_FILE=$2
        shift
        ;;
    -h)
        help
        exit 0
        ;;
    *)
        LOGS="$LOGS $1"
        ;;
    esac
    shift
done

if [ -z "$COMMAND" ] || [ "$COMMAND" == "merge" ]; then
    echo "$HEADER"
    if [ -z "$LOGS" ]; then
        cat | tail -n +2 | awk -F ',' -v after_date="$A_DATETIME" -v before_date="$B_DATETIME" -v gender="$GENDER" -v exit_code="$EXIT_CODE" \
            '{
                filters_passed=1
                split($2,date_split,"-")
                gsub(" ", "", $0)

                if ($0 ~ /^[[:space:]]*$/) {
                    filters_passed=0
                } else if (!($2 ~ /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/) && $2!="") {
                    filters_passed=0
                    exit_code=1
                    print "Invalid value:" $0 | "cat 1>&2"
                } else if (date_split[2]>12 || date_split[3]>31 || (date_split[3]>30 && (date_split[2]==04 || date_split[2]==06 || date_split[2]==09 || date_split[2]==11)) || (date_split[3]>29 && date_split[2]==02)) {
                    filters_passed=0
                    exit_code=1
                    print "Invalid value:" $0 | "cat 1>&2"
                } else if (!($3 ~ /^[0-9]{1,3}$/) && $3!="") {
                    filters_passed=0
                    exit_code=1
                    print "Invalid value:" $0 | "cat 1>&2"
                }

                if (after_date>$2 || $2>before_date) {
                    if (gender!=$4 && gender!="") {
                        filters_passed=0
                    }
                }

                if (filters_passed) {
                    print $0
                }
            }'
    else
        for file in $LOGS; do
            if [[ $file == *.gz ]]; then
                gzip -d -c $file | tail -n +2 | awk -F ',' -v after_date="$A_DATETIME" -v before_date="$B_DATETIME" -v gender="$GENDER" -v exit_code="$EXIT_CODE" \
                    '{
                        filters_passed=1
                        split($2,date_split,"-")
                        gsub(" ", "", $0)

                        if ($0 ~ /^[[:space:]]*$/) {
                            filters_passed=0
                        } else if (!($2 ~ /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/) && $2!="") {
                            filters_passed=0
                            exit_code=1
                            print "Invalid value:" $0 | "cat 1>&2"
                        } else if (date_split[2]>12 || date_split[3]>31 || (date_split[3]>30 && (date_split[2]==04 || date_split[2]==06 || date_split[2]==09 || date_split[2]==11)) || (date_split[3]>29 && date_split[2]==02)) {
                            filters_passed=0
                            exit_code=1
                            print "Invalid value:" $0 | "cat 1>&2"
                        } else if (!($3 ~ /^[0-9]{1,3}$/) && $3!="") {
                            filters_passed=0
                            exit_code=1
                            print "Invalid value:" $0 | "cat 1>&2"
                        }

                        if (after_date>$2 || $2>before_date) {
                            if (gender!=$4 && gender!="") {
                                filters_passed=0
                            }
                        }

                        if (filters_passed) {
                            print $0
                        }
                    }'
            elif [[ $file == *.bz2 ]]; then
                bzip2 -d -c $file | tail -n +2 | awk -F ',' -v after_date="$A_DATETIME" -v before_date="$B_DATETIME" -v gender="$GENDER" -v exit_code="$EXIT_CODE" \
                    '{
                        filters_passed=1
                        split($2,date_split,"-")
                        gsub(" ", "", $0)

                        if ($0 ~ /^[[:space:]]*$/) {
                            filters_passed=0
                        } else if (!($2 ~ /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/) && $2!="") {
                            filters_passed=0
                            exit_code=1
                            print "Invalid value:" $0 | "cat 1>&2"
                        } else if (date_split[2]>12 || date_split[3]>31 || (date_split[3]>30 && (date_split[2]==04 || date_split[2]==06 || date_split[2]==09 || date_split[2]==11)) || (date_split[3]>29 && date_split[2]==02)) {
                            filters_passed=0
                            exit_code=1
                            print "Invalid value:" $0 | "cat 1>&2"
                        } else if (!($3 ~ /^[0-9]{1,3}$/) && $3!="") {
                            filters_passed=0
                            exit_code=1
                            print "Invalid value:" $0 | "cat 1>&2"
                        }

                        if (after_date>$2 || $2>before_date) {
                            if (gender!=$4 && gender!="") {
                                filters_passed=0
                            }
                        }

                        if (filters_passed) {
                            print $0
                        }
                    }'
            else
                cat $file | tail -n +2 | awk -F ',' -v after_date="$A_DATETIME" -v before_date="$B_DATETIME" -v gender="$GENDER" -v exit_code="$EXIT_CODE" \
                    '{
                        filters_passed=1
                        split($2,date_split,"-")
                        gsub(" ", "", $0)

                        if ($0 ~ /^[[:space:]]*$/) {
                            filters_passed=0
                        } else if (!($2 ~ /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/) && $2!="") {
                            filters_passed=0
                            exit_code=1
                            print "Invalid value:" $0 | "cat 1>&2"
                        } else if (date_split[2]>12 || date_split[3]>31 || (date_split[3]>30 && (date_split[2]==04 || date_split[2]==06 || date_split[2]==09 || date_split[2]==11)) || (date_split[3]>29 && date_split[2]==02)) {
                            filters_passed=0
                            exit_code=1
                            print "Invalid value:" $0 | "cat 1>&2"
                        } else if (!($3 ~ /^[0-9]{1,3}$/) && $3!="") {
                            filters_passed=0
                            exit_code=1
                            print "Invalid value:" $0 | "cat 1>&2"
                        }

                        if (after_date>$2 || $2>before_date) {
                            if (gender!=$4 && gender!="") {
                                filters_passed=0
                            }
                        }

                        if (filters_passed) {
                            print $0
                        }
                    }'
            fi
        done
    fi
else
    if [ -z "$LOGS" ]; then
        cat | tail -n +2 | \
            awk -F ',' \
                -v after_date="$A_DATETIME" \
                -v before_date="$B_DATETIME" \
                -v gender="$GENDER" \
                -v width="$WIDTH" \
                -v command="$COMMAND" \
                -v exit_code="$EXIT_CODE" \
                -v header="$HEADER" \
                'BEGIN{
                    c_infected = 0
                }{
                    filters_passed=1
                    split($2,date_split,"-")
                    gsub(" ", "", $0)

                    if ($0 ~ /^[[:space:]]*$/ || $0 == header) {
                        filters_passed=0
                    } else if (!($2 ~ /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/) && $2!="") {
                        filters_passed=0
                        exit_code=1
                        print "Invalid value:" $0 | "cat 1>&2"
                    } else if (date_split[2]>12 || date_split[3]>31 || (date_split[3]>30 && (date_split[2]==04 || date_split[2]==06 || date_split[2]==09 || date_split[2]==11)) || (date_split[3]>29 && date_split[2]==02)) {
                        filters_passed=0
                        exit_code=1
                        print "Invalid value:" $0 | "cat 1>&2"
                    } else if (!($3 ~ /^[0-9]{1,3}$/) && $3!="") {
                        filters_passed=0
                        exit_code=1
                        print "Invalid value:" $0 | "cat 1>&2"
                    }

                    if ((after_date>$2 || $2>before_date) || (gender!=$4 && gender!="")) {
                        filters_passed=0
                    }

                    if (filters_passed) {
                        c_infected++
                    }
                }END{
                    if (command == "infected") {
                        print c_infected
                    }
                }'
    else
        if [[ $LOGS == *.gz ]]; then
            gzip -d -c $LOGS | tail -n +2 | \
                awk -F ',' \
                    -v after_date="$A_DATETIME" \
                    -v before_date="$B_DATETIME" \
                    -v gender="$GENDER" \
                    -v width="$WIDTH" \
                    -v command="$COMMAND" \
                    -v exit_code="$EXIT_CODE" \
                    -v header="$HEADER" \
                    'BEGIN{
                        c_infected = 0
                    }{
                        filters_passed=1
                        split($2,date_split,"-")
                        gsub(" ", "", $0)

                        if ($0 ~ /^[[:space:]]*$/ || $0 == header) {
                            filters_passed=0
                        } else if (!($2 ~ /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/) && $2!="") {
                            filters_passed=0
                            exit_code=1
                            print "Invalid value:" $0 | "cat 1>&2"
                        } else if (date_split[2]>12 || date_split[3]>31 || (date_split[3]>30 && (date_split[2]==04 || date_split[2]==06 || date_split[2]==09 || date_split[2]==11)) || (date_split[3]>29 && date_split[2]==02)) {
                            filters_passed=0
                            exit_code=1
                            print "Invalid value:" $0 | "cat 1>&2"
                        } else if (!($3 ~ /^[0-9]{1,3}$/) && $3!="") {
                            filters_passed=0
                            exit_code=1
                            print "Invalid value:" $0 | "cat 1>&2"
                        }

                        if ((after_date>$2 || $2>before_date) || (gender!=$4 && gender!="")) {
                            filters_passed=0
                        }

                        if (filters_passed) {
                            c_infected++
                        }
                    }END{
                        if (command == "infected") {
                            print c_infected
                        }
                    }'
        elif [[ $LOGS == *.bz2 ]]; then
            bzip2 -d -c $LOGS | tail -n +2 | \
                awk -F ',' \
                    -v after_date="$A_DATETIME" \
                    -v before_date="$B_DATETIME" \
                    -v gender="$GENDER" \
                    -v width="$WIDTH" \
                    -v command="$COMMAND" \
                    -v exit_code="$EXIT_CODE" \
                    -v header="$HEADER" \
                    'BEGIN{
                        c_infected = 0
                    }{
                        filters_passed=1
                        split($2,date_split,"-")
                        gsub(" ", "", $0)

                        if ($0 ~ /^[[:space:]]*$/ || $0 == header) {
                            filters_passed=0
                        } else if (!($2 ~ /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/) && $2!="") {
                            filters_passed=0
                            exit_code=1
                            print "Invalid value:" $0 | "cat 1>&2"
                        } else if (date_split[2]>12 || date_split[3]>31 || (date_split[3]>30 && (date_split[2]==04 || date_split[2]==06 || date_split[2]==09 || date_split[2]==11)) || (date_split[3]>29 && date_split[2]==02)) {
                            filters_passed=0
                            exit_code=1
                            print "Invalid value:" $0 | "cat 1>&2"
                        } else if (!($3 ~ /^[0-9]{1,3}$/) && $3!="") {
                            filters_passed=0
                            exit_code=1
                            print "Invalid value:" $0 | "cat 1>&2"
                        }

                        if ((after_date>$2 || $2>before_date) || (gender!=$4 && gender!="")) {
                            filters_passed=0
                        }

                        if (filters_passed) {
                            c_infected++
                        }
                    }END{
                        if (command == "infected") {
                            print c_infected
                        }
                    }'
        else
            cat $LOGS | tail -n +2 | \
                awk -F ',' \
                    -v after_date="$A_DATETIME" \
                    -v before_date="$B_DATETIME" \
                    -v gender="$GENDER" \
                    -v width="$WIDTH" \
                    -v command="$COMMAND" \
                    -v exit_code="$EXIT_CODE" \
                    -v header="$HEADER" \
                    'BEGIN{
                        c_infected = 0
                    }{
                        filters_passed=1
                        split($2,date_split,"-")
                        gsub(" ", "", $0)

                        if ($0 ~ /^[[:space:]]*$/ || $0 == header) {
                            filters_passed=0
                        } else if (!($2 ~ /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/) && $2!="") {
                            filters_passed=0
                            exit_code=1
                            print "Invalid value:" $0 | "cat 1>&2"
                        } else if (date_split[2]>12 || date_split[3]>31 || (date_split[3]>30 && (date_split[2]==04 || date_split[2]==06 || date_split[2]==09 || date_split[2]==11)) || (date_split[3]>29 && date_split[2]==02)) {
                            filters_passed=0
                            exit_code=1
                            print "Invalid value:" $0 | "cat 1>&2"
                        } else if (!($3 ~ /^[0-9]{1,3}$/) && $3!="") {
                            filters_passed=0
                            exit_code=1
                            print "Invalid value:" $0 | "cat 1>&2"
                        }

                        if ((after_date>$2 || $2>before_date) || (gender!=$4 && gender!="")) {
                            filters_passed=0
                        }

                        if (filters_passed) {
                            c_infected++
                        }
                    }END{
                        if (command == "infected") {
                            print c_infected
                        }
                    }'
        fi
    fi
fi

exit "$EXIT_CODE"
