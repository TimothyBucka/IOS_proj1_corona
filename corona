#!/usr/bin/env bash

# Made by: Timotej Bucka (xbucka00)
# 2022

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

# id,                     1
# datum,                  2
# vek,                    3
# pohlavi,                4
# kraj_nuts_kod,          5
# okres_lau_kod,          6
# nakaza_v_zahranici,     7
# nakaza_zeme_csu_kod,    8
# reportovano_khs         9

############################## FUNCTIONS ##############################
# Put >105 and None lines at the end of output
awk_sort_end() {
    awk \
        '{
            if ($0 ~ /^None.*/)
                none_line=$0
            else if ($0 ~ /^>105.*/)
                age_line=$0
            else
                print $0
        } END {
            if (age_line != "")
                print age_line
            if (none_line != "")
                print none_line
        }'
}

# check if age is valid
check_date() {
    if [[ "$1" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] && [ -n "$(date -d "$1" 2>/dev/null)" ]; then
        return 0
    else
        return 1
    fi
}

# print error message
error_msg() {
    if [ "$1" == "" ]; then
        echo "./corona: $2" 1>&2
    else
        echo "./corona: $1: $2" 1>&2
    fi
    exit "$3"
}

# print help
help() {
    echo "This script filters records of people infected by COVID-19."
    echo ""
    echo "Usage: corona [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]]"
    echo ""
    echo "   -h              prints help with instructions, and script terminates"
    echo ""
    echo "COMMAND:"
    echo "   infected          prints number of infected"
    echo "   merge             merges multiple input files into one, keeping the original order"
    echo "   gender            prints number of infected for each gender"
    echo "   age               prints number of infected for each age group"
    echo "   daily             prints number of infected for each day"
    echo "   monthly           prints number of infected for each month"
    echo "   yearly            prints number of infected for each year"
    echo "   countries         prints number of infected for each country (CZ not included)"
    echo "   districts         prints number of infected for each district"
    echo "   regions           prints number of infected for each region"
    echo ""
    echo "FILTERS:"
    echo "   -a DATETIME       after: records after given date (included)"
    echo "   -b DATETIME       before: records before given date (included)"
    echo "   -g GENDER         records with given GENDER: M - male (muzi), Z - female (zeny)"
    echo "   -s [WIDTH]        with commands gender, age, daily, monthly, yearly, countries"
    echo "                     districts and regions the data are displayed in a histogram."
    echo "                     WIDTH (optional positive number) sets width of the histogram."
    echo "                     If not given, with is set to default (see documentation)"
    echo "   -d DISTRICT_FILE  for command disrticts prints, instead of the LAU 1 code of"
    echo "                     a district, its proper name. DISTRICT_FILE contains the"
    echo "                     code to name mapping"
    echo "   -r REGIONS_FILE   for command regions prints instead of the NUTS 3 code of"
    echo "                     a region, its proper name. REGIONS_FILE contains the"
    echo "                     code to name mapping"
    echo ""
    echo "If no commands or filters are given, script prints records to standart output"
    echo "Script is able to process .gz or .bz2 files"
    echo "If no files (LOG, LOG2, ...) are given, sript expects records from standart input"
    echo ""
}

# count records
traverse_awk() {
    awk -F ',' \
        -v after_date="$A_DATETIME" \
        -v before_date="$B_DATETIME" \
        -v gender="$GENDER" \
        -v width="$WIDTH" \
        -v command="$COMMAND" \
        -v header="$HEADER" \
        -v s_filter="$S_FILTER" \
        '
        # filter out  invalid lines
        function filters_passed() {
            if ($0 ~ /^[[:space:]]*$/ || $0 == header) {
                return 0
            } else if (!($2 ~ /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/) && $2!="") {          # check date format
                print "Invalid date: " $0 | "cat 1>&2"
                return 0
            } else if (date_split[2]>12 || date_split[3]>31 || (date_split[3]>30 && (date_split[2]==04 || date_split[2]==06 || date_split[2]==09 || date_split[2]==11)) || (date_split[3]>29 && date_split[2]==02)) {
                print "Invalid date: " $0 | "cat 1>&2"
                return 0
            } else if (!($3 ~ /^[0-9]{1,3}$/) && $3!="") {                          # check age
                print "Invalid age: " $0 | "cat 1>&2"
                return 0
            } else if ((after_date>$2 || $2>before_date) || (gender!=$4 && gender!="")) {       # -a -b -g filter
                return 0
            }
            return 1        # record is valid and worthy of being printed or counted
        }

        # print array (arr), number of infections are represented by one # (hist_default), left justify (..: 123) (line_len) eg: line_len=5 -> foo••
        function print_array(arr, hist_default, line_len) {
            if (width != "") {                                                     # if -s has an argument
                max_val = 0
                for (i in arr) { if (arr[i] > max_val) max_val = arr[i] }          # search for max value in data
                hist_default = max_val / width
            }

            for (i in arr) {
                if (s_filter) {
                    hist_line = ""
                    for (u = 0; u < int(arr[i]/hist_default); u++) {               # appropriate amount of #
                        hist_line = hist_line"#"
                    }
                    arr[i] = hist_line                                             # to print #... instead of number
                }

                if ( i == "" ) {
                    printf("%-*s: %s\n", line_len, "None", arr[""])
                } else {
                    if (command == "age")
                        printf("%-*s: %s\n", line_len, i, arr[i]) | "sort -g"      # sort by string value. 6-15 is before 16-25
                    else
                        printf("%-*s: %s\n", line_len, i, arr[i]) | "sort"
                        
                }
            }
        }
        
        BEGIN{
            c_infected = 0

            # values in associative arrays assigned to be printed in print_array(), even if no record
            gender_arr["M"] = 0
            gender_arr["Z"] = 0

            age_arr["0-5"] = 0
            age_arr["6-15"] = 0
            age_arr["16-25"] = 0
            age_arr["26-35"] = 0
            age_arr["36-45"] = 0
            age_arr["46-55"] = 0
            age_arr["56-65"] = 0
            age_arr["66-75"] = 0
            age_arr["76-85"] = 0
            age_arr["86-95"] = 0
            age_arr["96-105"] = 0
            age_arr[">105"] = 0
        }{
            gsub(" ", "", $0)                                       # remove spaces
            split($2,date_split,"-")                                # split date to date_split[(1 - year / 2 - month / 3 - day)]  

            if (filters_passed()) {
                if (command == "merge" || command == "") {          # print only when command is merge or no command
                    print $0
                } else {
                    c_infected++
                    gender_arr[$4]++
                    if (command == "age") {
                        if ($3 == "") { age_arr[""]++ }
                        else if ($3 <= 5) { age_arr["0-5"]++ }
                        else if ($3 <= 15) { age_arr["6-15"]++ }
                        else if ($3 <= 25) { age_arr["16-25"]++ }
                        else if ($3 <= 35) { age_arr["26-35"]++ }
                        else if ($3 <= 45) { age_arr["36-45"]++ }
                        else if ($3 <= 55) { age_arr["46-55"]++ }
                        else if ($3 <= 65) { age_arr["56-65"]++ }
                        else if ($3 <= 75) { age_arr["66-75"]++ }
                        else if ($3 <= 85) { age_arr["76-85"]++ }
                        else if ($3 <= 95) { age_arr["86-95"]++ }
                        else if ($3 <= 105) { age_arr["96-105"]++ }
                        else { age_arr[">105"]++ }
                    }
                    day_arr[$2]++
                    month_arr[substr($2, 1, 7)]++                       # take YYYY-MM part of date (from index 1 including, take 7 characters)
                    year_arr[substr($2, 1, 4)]++                        # take YYYY part of date (from index 1 including, take 4 characters)
                    if ($8 != "" && $8 != "CZ")                         # dont print infections from Czech republic or when the country is unknown
                        country_arr[$8]++
                    district_arr[$6]++
                    region_arr[$5]++
                }
            }
        }END{
            if (command == "infected") {
                print c_infected
            } else if (command == "gender") {
                print_array(gender_arr, 100000, 0)
            } else if (command == "age") {
                print_array(age_arr, 10000, 6)                          # 96-105 is 6 characters long
            } else if (command == "daily") {
                print_array(day_arr, 500, 0)
            } else if (command == "monthly") {
                print_array(month_arr, 10000, 0)
            } else if (command == "yearly") {
                print_array(year_arr, 100000, 0)
            } else if (command == "countries") {
                print_array(country_arr, 100, 0)
            } else if (command == "districts") {
                print_array(district_arr, 1000, 0)
            } else if (command == "regions") {
                print_array(region_arr, 10000, 0)
            }
        }'
}

############################## DATA ##############################
COMMAND=""

S_FILTER=0

# filter parameters
A_DATETIME=""
B_DATETIME="2023-01-01"
GENDER=""
WIDTH=""
DISTRICT_FILE=""
REGIONS_FILE=""

HEADER="id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs"
LOGS="" # file names

# exit codes
EC_SUCCESS="0"
EC_MUL_COMMANDS="1"
EC_UNK_FILTER="2"
EC_WRG_FARG="3"

############################## MAIN ##############################
while [ "$#" -gt 0 ]; do                                                                                    # until all arguments are processed
    case "$1" in
        infected | merge | gender | age | daily | monthly | yearly | countries | districts | regions)
            if [ -n "$COMMAND" ]; then error_msg "" "Multiple commands not allowed" "$EC_MUL_COMMANDS"; fi
            COMMAND=$1
            ;;
        -a)
            if [ "$#" -lt 2 ]; then error_msg "" "Filter argument missing" "$EC_WRG_FARG"; fi
            if ! check_date "$2"; then error_msg "$2" "Invalid date" "$EC_WRG_FARG"; fi
            A_DATETIME=$2
            shift                                                                                           # $2 has been processed. $2 becomes $1 but shift is called every iteration (line 303 - end of while)   
            ;;
        -b)
            if [ "$#" -lt 2 ]; then error_msg "" "Filter argument missing" "$EC_WRG_FARG"; fi
            if ! check_date "$2"; then error_msg "$2" "Invalid date" "$EC_WRG_FARG"; fi
            B_DATETIME=$2
            shift
            ;;
        -g)
            if [ "$#" -lt 2 ]; then error_msg "" "Filter argument missing" "$EC_WRG_FARG"; fi
            if [ "$2" != "M" ] && [ "$2" != "Z" ]; then error_msg "$2" "Unknown gender" "$EC_WRG_FARG"; fi
            GENDER=$2
            shift
            ;;
        -s)
            S_FILTER=1
            if [ "$#" -ge 2 ]; then
                if [[ "$2" =~ ^-[0-9]+$ ]] || [[ "$2" =~ ^-?[0-9]*[.,][0-9]*$ ]] || [ "$2" == "0" ]; then error_msg "" "Width must be a positive integer" "$EC_WRG_FARG"; fi
                if [[ "$2" =~ ^[0-9]+$ ]]; then
                    WIDTH=$2
                    shift
                fi
            fi
            ;;
        -d)
            if [ "$#" -lt 2 ]; then error_msg "" "Filter argument missing" "$EC_WRG_FARG"; fi
            DISTRICT_FILE=$2
            shift
            ;;
        -r)
            if [ "$#" -lt 2 ]; then error_msg "" "Filter argument missing" "$EC_WRG_FARG"; fi
            REGIONS_FILE=$2
            shift
            ;;
        -h)
            help
            exit "$EC_SUCCESS"
            ;;
        *)
            if [[ $1 =~ ^-.+$ ]]; then error_msg "$1" "Unknown filter" "$EC_UNK_FILTER"; fi
            LOGS="$LOGS $1"
            ;;
    esac
    shift                                                                                   # get another (new) argument, $1 is the new one 
done

if [ -z "$COMMAND" ] || [ "$COMMAND" == "merge" ]; then                     # when no command or merge, i dont need to remember each value of (infected, gender ...) in awk, i just need to print
    echo "$HEADER"                                                          # if records are printed header is printed too
    if [ -z "$LOGS" ]; then                                                 # no file, read stdin
        cat | tail -n +2 | traverse_awk                                     # tail -n +2, to get rid of header from input file
    else
        for file in $LOGS; do                                               # iterate through files from arguments
            if [[ $file == *.gz ]]; then
                gzip -d -c $file | tail -n +2 | traverse_awk
            elif [[ $file == *.bz2 ]]; then
                bzip2 -d -c $file | tail -n +2 | traverse_awk
            else
                cat $file | tail -n +2 | traverse_awk
            fi
        done
    fi
else
    if [ -z "$LOGS" ]; then                                                 # no file, read stdin
        cat | tail -n +2 | traverse_awk | awk_sort_end
    else
        if [[ $LOGS == *.gz ]]; then
            gzip -d -c $LOGS | tail -n +2 | traverse_awk | awk_sort_end
        elif [[ $LOGS == *.bz2 ]]; then
            bzip2 -d -c $LOGS | tail -n +2 | traverse_awk | awk_sort_end
        else
            cat $LOGS | tail -n +2 | traverse_awk | awk_sort_end
        fi
    fi
fi

exit "$EC_SUCCESS"
